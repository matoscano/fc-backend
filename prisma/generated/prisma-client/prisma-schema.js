module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBalanceTransaction {
  count: Int!
}

type AggregateMovie {
  count: Int!
}

type AggregateShareholder {
  count: Int!
}

type AggregateTransfer {
  count: Int!
}

type BalanceTransaction {
  id: ID!
  createAt: DateTime!
  transfer: Transfer!
  amount: Float!
}

type BalanceTransactionConnection {
  pageInfo: PageInfo!
  edges: [BalanceTransactionEdge]!
  aggregate: AggregateBalanceTransaction!
}

input BalanceTransactionCreateInput {
  id: ID
  createAt: DateTime!
  transfer: TransferCreateOneInput!
  amount: Float!
}

input BalanceTransactionCreateManyInput {
  create: [BalanceTransactionCreateInput!]
  connect: [BalanceTransactionWhereUniqueInput!]
}

type BalanceTransactionEdge {
  node: BalanceTransaction!
  cursor: String!
}

enum BalanceTransactionOrderByInput {
  id_ASC
  id_DESC
  createAt_ASC
  createAt_DESC
  amount_ASC
  amount_DESC
}

type BalanceTransactionPreviousValues {
  id: ID!
  createAt: DateTime!
  amount: Float!
}

input BalanceTransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [BalanceTransactionScalarWhereInput!]
  OR: [BalanceTransactionScalarWhereInput!]
  NOT: [BalanceTransactionScalarWhereInput!]
}

type BalanceTransactionSubscriptionPayload {
  mutation: MutationType!
  node: BalanceTransaction
  updatedFields: [String!]
  previousValues: BalanceTransactionPreviousValues
}

input BalanceTransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BalanceTransactionWhereInput
  AND: [BalanceTransactionSubscriptionWhereInput!]
  OR: [BalanceTransactionSubscriptionWhereInput!]
  NOT: [BalanceTransactionSubscriptionWhereInput!]
}

input BalanceTransactionUpdateDataInput {
  createAt: DateTime
  transfer: TransferUpdateOneRequiredInput
  amount: Float
}

input BalanceTransactionUpdateInput {
  createAt: DateTime
  transfer: TransferUpdateOneRequiredInput
  amount: Float
}

input BalanceTransactionUpdateManyDataInput {
  createAt: DateTime
  amount: Float
}

input BalanceTransactionUpdateManyInput {
  create: [BalanceTransactionCreateInput!]
  update: [BalanceTransactionUpdateWithWhereUniqueNestedInput!]
  upsert: [BalanceTransactionUpsertWithWhereUniqueNestedInput!]
  delete: [BalanceTransactionWhereUniqueInput!]
  connect: [BalanceTransactionWhereUniqueInput!]
  set: [BalanceTransactionWhereUniqueInput!]
  disconnect: [BalanceTransactionWhereUniqueInput!]
  deleteMany: [BalanceTransactionScalarWhereInput!]
  updateMany: [BalanceTransactionUpdateManyWithWhereNestedInput!]
}

input BalanceTransactionUpdateManyMutationInput {
  createAt: DateTime
  amount: Float
}

input BalanceTransactionUpdateManyWithWhereNestedInput {
  where: BalanceTransactionScalarWhereInput!
  data: BalanceTransactionUpdateManyDataInput!
}

input BalanceTransactionUpdateWithWhereUniqueNestedInput {
  where: BalanceTransactionWhereUniqueInput!
  data: BalanceTransactionUpdateDataInput!
}

input BalanceTransactionUpsertWithWhereUniqueNestedInput {
  where: BalanceTransactionWhereUniqueInput!
  update: BalanceTransactionUpdateDataInput!
  create: BalanceTransactionCreateInput!
}

input BalanceTransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  transfer: TransferWhereInput
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [BalanceTransactionWhereInput!]
  OR: [BalanceTransactionWhereInput!]
  NOT: [BalanceTransactionWhereInput!]
}

input BalanceTransactionWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Movie {
  id: ID!
  createAt: DateTime!
  title: String!
}

type MovieConnection {
  pageInfo: PageInfo!
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreateInput {
  id: ID
  createAt: DateTime!
  title: String!
}

input MovieCreateOneInput {
  create: MovieCreateInput
  connect: MovieWhereUniqueInput
}

type MovieEdge {
  node: Movie!
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  createAt_ASC
  createAt_DESC
  title_ASC
  title_DESC
}

type MoviePreviousValues {
  id: ID!
  createAt: DateTime!
  title: String!
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
  AND: [MovieSubscriptionWhereInput!]
  OR: [MovieSubscriptionWhereInput!]
  NOT: [MovieSubscriptionWhereInput!]
}

input MovieUpdateDataInput {
  createAt: DateTime
  title: String
}

input MovieUpdateInput {
  createAt: DateTime
  title: String
}

input MovieUpdateManyMutationInput {
  createAt: DateTime
  title: String
}

input MovieUpdateOneRequiredInput {
  create: MovieCreateInput
  update: MovieUpdateDataInput
  upsert: MovieUpsertNestedInput
  connect: MovieWhereUniqueInput
}

input MovieUpsertNestedInput {
  update: MovieUpdateDataInput!
  create: MovieCreateInput!
}

input MovieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
}

input MovieWhereUniqueInput {
  id: ID
}

type Mutation {
  createBalanceTransaction(data: BalanceTransactionCreateInput!): BalanceTransaction!
  updateBalanceTransaction(data: BalanceTransactionUpdateInput!, where: BalanceTransactionWhereUniqueInput!): BalanceTransaction
  updateManyBalanceTransactions(data: BalanceTransactionUpdateManyMutationInput!, where: BalanceTransactionWhereInput): BatchPayload!
  upsertBalanceTransaction(where: BalanceTransactionWhereUniqueInput!, create: BalanceTransactionCreateInput!, update: BalanceTransactionUpdateInput!): BalanceTransaction!
  deleteBalanceTransaction(where: BalanceTransactionWhereUniqueInput!): BalanceTransaction
  deleteManyBalanceTransactions(where: BalanceTransactionWhereInput): BatchPayload!
  createMovie(data: MovieCreateInput!): Movie!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateManyMovies(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): BatchPayload!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  createShareholder(data: ShareholderCreateInput!): Shareholder!
  updateShareholder(data: ShareholderUpdateInput!, where: ShareholderWhereUniqueInput!): Shareholder
  updateManyShareholders(data: ShareholderUpdateManyMutationInput!, where: ShareholderWhereInput): BatchPayload!
  upsertShareholder(where: ShareholderWhereUniqueInput!, create: ShareholderCreateInput!, update: ShareholderUpdateInput!): Shareholder!
  deleteShareholder(where: ShareholderWhereUniqueInput!): Shareholder
  deleteManyShareholders(where: ShareholderWhereInput): BatchPayload!
  createTransfer(data: TransferCreateInput!): Transfer!
  updateTransfer(data: TransferUpdateInput!, where: TransferWhereUniqueInput!): Transfer
  updateManyTransfers(data: TransferUpdateManyMutationInput!, where: TransferWhereInput): BatchPayload!
  upsertTransfer(where: TransferWhereUniqueInput!, create: TransferCreateInput!, update: TransferUpdateInput!): Transfer!
  deleteTransfer(where: TransferWhereUniqueInput!): Transfer
  deleteManyTransfers(where: TransferWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  balanceTransaction(where: BalanceTransactionWhereUniqueInput!): BalanceTransaction
  balanceTransactions(where: BalanceTransactionWhereInput, orderBy: BalanceTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BalanceTransaction]!
  balanceTransactionsConnection(where: BalanceTransactionWhereInput, orderBy: BalanceTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BalanceTransactionConnection!
  movie(where: MovieWhereUniqueInput!): Movie
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  shareholder(where: ShareholderWhereUniqueInput!): Shareholder
  shareholders(where: ShareholderWhereInput, orderBy: ShareholderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shareholder]!
  shareholdersConnection(where: ShareholderWhereInput, orderBy: ShareholderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShareholderConnection!
  transfer(where: TransferWhereUniqueInput!): Transfer
  transfers(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transfer]!
  transfersConnection(where: TransferWhereInput, orderBy: TransferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransferConnection!
  node(id: ID!): Node
}

type Shareholder {
  id: ID!
  createAt: DateTime!
  firstName: String
  lastName: String
  address: String
  iban: String
  movie: Movie!
  balance(where: BalanceTransactionWhereInput, orderBy: BalanceTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BalanceTransaction!]
}

type ShareholderConnection {
  pageInfo: PageInfo!
  edges: [ShareholderEdge]!
  aggregate: AggregateShareholder!
}

input ShareholderCreateInput {
  id: ID
  createAt: DateTime!
  firstName: String
  lastName: String
  address: String
  iban: String
  movie: MovieCreateOneInput!
  balance: BalanceTransactionCreateManyInput
}

type ShareholderEdge {
  node: Shareholder!
  cursor: String!
}

enum ShareholderOrderByInput {
  id_ASC
  id_DESC
  createAt_ASC
  createAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  address_ASC
  address_DESC
  iban_ASC
  iban_DESC
}

type ShareholderPreviousValues {
  id: ID!
  createAt: DateTime!
  firstName: String
  lastName: String
  address: String
  iban: String
}

type ShareholderSubscriptionPayload {
  mutation: MutationType!
  node: Shareholder
  updatedFields: [String!]
  previousValues: ShareholderPreviousValues
}

input ShareholderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShareholderWhereInput
  AND: [ShareholderSubscriptionWhereInput!]
  OR: [ShareholderSubscriptionWhereInput!]
  NOT: [ShareholderSubscriptionWhereInput!]
}

input ShareholderUpdateInput {
  createAt: DateTime
  firstName: String
  lastName: String
  address: String
  iban: String
  movie: MovieUpdateOneRequiredInput
  balance: BalanceTransactionUpdateManyInput
}

input ShareholderUpdateManyMutationInput {
  createAt: DateTime
  firstName: String
  lastName: String
  address: String
  iban: String
}

input ShareholderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  iban: String
  iban_not: String
  iban_in: [String!]
  iban_not_in: [String!]
  iban_lt: String
  iban_lte: String
  iban_gt: String
  iban_gte: String
  iban_contains: String
  iban_not_contains: String
  iban_starts_with: String
  iban_not_starts_with: String
  iban_ends_with: String
  iban_not_ends_with: String
  movie: MovieWhereInput
  balance_every: BalanceTransactionWhereInput
  balance_some: BalanceTransactionWhereInput
  balance_none: BalanceTransactionWhereInput
  AND: [ShareholderWhereInput!]
  OR: [ShareholderWhereInput!]
  NOT: [ShareholderWhereInput!]
}

input ShareholderWhereUniqueInput {
  id: ID
}

type Subscription {
  balanceTransaction(where: BalanceTransactionSubscriptionWhereInput): BalanceTransactionSubscriptionPayload
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  shareholder(where: ShareholderSubscriptionWhereInput): ShareholderSubscriptionPayload
  transfer(where: TransferSubscriptionWhereInput): TransferSubscriptionPayload
}

type Transfer {
  id: ID!
  createAt: DateTime!
  movie: Movie!
  amount: Float!
  description: String
}

type TransferConnection {
  pageInfo: PageInfo!
  edges: [TransferEdge]!
  aggregate: AggregateTransfer!
}

input TransferCreateInput {
  id: ID
  createAt: DateTime!
  movie: MovieCreateOneInput!
  amount: Float!
  description: String
}

input TransferCreateOneInput {
  create: TransferCreateInput
  connect: TransferWhereUniqueInput
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  id_ASC
  id_DESC
  createAt_ASC
  createAt_DESC
  amount_ASC
  amount_DESC
  description_ASC
  description_DESC
}

type TransferPreviousValues {
  id: ID!
  createAt: DateTime!
  amount: Float!
  description: String
}

type TransferSubscriptionPayload {
  mutation: MutationType!
  node: Transfer
  updatedFields: [String!]
  previousValues: TransferPreviousValues
}

input TransferSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransferWhereInput
  AND: [TransferSubscriptionWhereInput!]
  OR: [TransferSubscriptionWhereInput!]
  NOT: [TransferSubscriptionWhereInput!]
}

input TransferUpdateDataInput {
  createAt: DateTime
  movie: MovieUpdateOneRequiredInput
  amount: Float
  description: String
}

input TransferUpdateInput {
  createAt: DateTime
  movie: MovieUpdateOneRequiredInput
  amount: Float
  description: String
}

input TransferUpdateManyMutationInput {
  createAt: DateTime
  amount: Float
  description: String
}

input TransferUpdateOneRequiredInput {
  create: TransferCreateInput
  update: TransferUpdateDataInput
  upsert: TransferUpsertNestedInput
  connect: TransferWhereUniqueInput
}

input TransferUpsertNestedInput {
  update: TransferUpdateDataInput!
  create: TransferCreateInput!
}

input TransferWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  movie: MovieWhereInput
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
  NOT: [TransferWhereInput!]
}

input TransferWhereUniqueInput {
  id: ID
}
`
      }
    